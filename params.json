{"name":"OneLock","tagline":"Introducing an interesting model of internet security","body":"OneLock\r\n==============\r\n\r\nThis is a chrome extension which brings an interesting model of security to\r\nnormal web applications.\r\n\r\n### Why does this exist?\r\n\r\nToday's web applications run on trust. To use them, you must trust them to\r\nrespect your privacy and actively protect it against malicious hackers. The\r\nproblem is, violations of trust happen from time to time despite many best\r\nefforts.\r\n\r\nWhen a web service transmits a message from you to a friend, there are many\r\npotential holes along the way where it can be leaked or stolen. You trust\r\n*each* web-service to secure *each* hole. What if, instead, you trusted *one*\r\ntool of yours to secure the whole thing? OneLock is that tool (well, it's a\r\nprototype). \"*Isn't that just https?*\" I'm glad you asked, because, no, it's\r\nnot! Https eliminates the need to trust your connection (by using\r\nclient-to-server encryption). However, https doesn't help you avoid trusting\r\nthe server. **Onelock eliminates the need to trust the server** (by using\r\nclient-to-client encryption). Your intended recipient becomes the only entity\r\ncapable of decrypting your message.\r\n\r\nOnelock uses public-key cryptography, which has been around for a while and has\r\nbeen widely used. To my knowledge, it's never been generically molded onto web\r\napplications in this way.\r\n\r\nOneLock is experimental. Please don't count on it. I'm actually thinking of\r\nre-writing it from scratch.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}